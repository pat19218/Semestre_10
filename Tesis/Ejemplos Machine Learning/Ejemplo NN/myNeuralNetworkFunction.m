function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-May-2019 14:34:28.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 13xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [11.03;0.74;1.36;10.6;70;0.98;0.34;0.13;0.41;1.28;0.48;1.27;278];
x1_step1.gain = [0.526315789473684;0.395256916996047;1.06951871657754;0.103092783505155;0.0217391304347826;0.689655172413793;0.421940928270042;3.77358490566038;0.630914826498423;0.170648464163823;1.6260162601626;0.732600732600733;0.0014265335235378];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5857751381879070518;-1.502075911518136353;0.88271932678263342886;-0.015481843527095352081;0.78625859836613287701;0.62985733982436065137;0.43943333027363995491;0.75326155890456181208;-0.97707894196150391064;1.6902558479634917088];
IW1_1 = [0.87334423951653716856 0.11170124948387682995 0.247699011652318557 0.33072378866368928874 0.30964600776703954388 0.34862637344545921447 0.053003804451973439427 -0.58156150845588638898 -0.63820210374970887113 -0.55301759105668002459 -0.052933930227866396456 1.1732307326682853699 0.03585038743332984168;0.16863981577273479129 -0.49697312005086569098 0.17381351727481456071 -0.31442678819367708698 0.039305315493296015539 0.32862595025532426174 -0.09877354476141160522 0.83508294664650351002 0.42828779569633163016 -0.44428811775297244457 -0.022000685881094921709 0.61139099710395627962 -0.49305392530736680268;-0.34764573729773939892 -0.51709656759309430285 0.55109324055391106789 0.5432754623366263802 0.59613301857233069736 0.65175341384107188247 -0.35039446404035817784 -0.49987027597860850259 0.4930504595889307895 -0.44454846890565818951 -0.086674397136315958767 0.057142423081178464472 -0.42712837703883482776;-0.77495567105723750512 0.010884141082694649694 0.21656987319479176213 -0.068163796843011034698 -0.34744888205045953988 -0.65076406293544408754 0.037354721640392593573 0.51181749992793046378 0.52010250278058500761 -0.67081146202728059169 -0.52146043949429121689 -0.20504032148459472307 -1.1090196157572411728;0.83217872618087618264 0.59665771648448340247 0.74662366280028535925 -0.53860761278778135352 0.46986489000349390688 0.16741599611795482394 -0.38511734735536407026 0.033692648091624692597 -0.58767913719188413779 0.94300020883152213536 -0.68781957981749075604 -0.23371265586159589711 1.2733014216510643024;0.19979571321193437261 -0.60691179691411956121 -0.47879152992807327838 -0.6070689627289439505 0.29142225987480407934 0.34628600245591756313 0.75163152389228293782 0.40481324645655225591 0.0017728140302956073293 -0.48747610683584308156 -0.21600963430080682981 1.3815495333935998712 0.7733042879198107622;0.53793506287845327396 0.13922323283714249653 -0.57079679463793653316 0.13503261442137728943 -0.11629195687236615342 -0.75998871475672413744 0.57510238463769769446 -0.85420628407991472386 -0.31465177455191589706 0.12417410991505779816 -0.43803739255336759939 -0.047112046978514947326 0.3846194246063192046;0.37728596589927310134 -0.44224973849650572877 -0.47953179704841919495 -0.028017909327133425079 0.15845123603872104945 -0.27729855191101054901 0.47219557612145796055 -0.088537236609609618054 0.55995467237196949739 -0.58777843739871238338 -0.41137686652043814473 -0.68307516833947523605 -0.76582574084925780777;-0.2801524691551344759 0.45596113346798211596 0.63644068613595550232 -0.12259510547132385083 -0.80202850538205816555 -0.88514440841607688881 -0.59054086033640385001 -0.49625036698435753824 -0.38155222416775458338 0.80964832177212220365 -0.54795136773511121664 -0.089516297747394044104 -0.64571776145557868709;0.28654495915755062718 -0.36519996789190167785 -0.33410617471510795085 0.45776399138289181057 -0.64434117102798083021 0.45158905654889358594 -0.56802673893106647718 0.65975808694522553033 0.60413143153754644832 0.16879061710644327476 -0.62991092815123017612 -0.11283173933125259514 -0.17762224927884126546];

% Layer 2
b2 = [0.55455673399087890285;0.02818215889967641552;-0.19247259157292523346];
LW2_1 = [0.70160600487250579516 -0.17954226649644075553 0.23266571442108585632 -1.181949004843734885 0.69523922552067696223 1.3468420838706529619 0.63327608252149281132 -0.4264360921897877299 -0.50080710856037413681 0.44961968600297563814;-0.91938862498049411798 0.19914438803509224019 0.17717306664535198424 0.76664220293596108124 -2.1864238210598339052 0.15342684691968302979 0.28646480871888801989 0.06618726896717186392 0.016231380686996359219 0.26922352947604288875;-1.0229748208773676854 0.080053658617002074194 -0.11848165735924452713 -0.124755942663278524 0.96872696672499936099 -1.5263254012966314122 0.46403967272022839108 -0.26176755672281909471 1.1583915836243752207 -0.083325356004191927783];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
